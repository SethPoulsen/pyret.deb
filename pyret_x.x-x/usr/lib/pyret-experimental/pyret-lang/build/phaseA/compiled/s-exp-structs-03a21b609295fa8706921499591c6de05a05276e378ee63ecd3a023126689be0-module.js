({"theMap":"{\"version\":3,\"sources\":[\"builtin://s-exp-structs\"],\"names\":[\"builtin://s-exp-structs\",\",10,0,105,15,3,221\",\",11,2,119,11,31,148\",\",12,2,151,12,22,171\",\",13,2,174,13,22,194\",\",14,2,197,14,22,217\"],\"mappingsoBASDC,6BATCD;AAAAA;AAAAA;AAAAA;AAAAA,oBAUCE,iCAVDF;AAAAA;AAAAA;AAAAA;AAAAA,oBAUCE,8BAVDF;AAAAA;AAAAA;AAAAA;AAAAA,oBAWCG,gCAXDH;AAAAA;AAAAA;AAAAA;AAAAA,oBAWCG,6BAXDH;AAAAA;AAAAA;AAAAA;AAAAA,oBAYCI,gCAZDJ;AAAAA;AAAAA;AAAAA;AAAAA,oBAYCI,6BAZDJ;AAAAA;AAAAA;AAAAA;AAAAA,oBAaCK,gCAbDL;AAAAA;AAAAA;AAAAA;AAAAA,oBAaCK,6BAbDL;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,SASDC,oDATCD;AAAAA;AAAAA;AAAAA;AAAAA,SASDC,oDATCD;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA\",\"file\":\"builtin://s-exp-structs\"}",
"theModule":"function _03a21b609295fa8706921499591c6de05a05276e378ee63ecd3a023126689be0__11(R,NAMESPACE,M,$$import45,$lists21) {\nvar G = R.getFieldLoc;\nvar U = function throw_error(loc,name) {\nR.ffi.throwUninitializedIdMkLoc(loc,name);\n};\nvar M = \"builtin://s-exp-structs\";\nvar D = R.undefined;\nvar L = [[M,11,2,119,11,31,148],\n[M,11,19,136,11,30,147],\n[M,12,2,151,12,22,171],\n[M,12,15,164,12,21,170],\n[M,13,2,174,13,22,194],\n[M,13,15,187,13,21,193],\n[M,14,2,197,14,22,217],\n[M,14,15,210,14,21,216],\n[M,10,0,105,15,3,221],\n[\"dummy location\"],\n[M,8,12,93,8,22,103],\n[M,3,0,13,15,3,221]];\nvar builtins1 = R.gF(R.modules[\"builtin://global\"],\"defined-values\")[\"builtins\"];\nvar nothing2 = R.gF(R.modules[\"builtin://global\"],\"defined-values\")[\"nothing\"];\nvar $type$Number3 = R.gF(R.modules[\"builtin://global\"],\"defined-types\")[\"Number\"];\nvar $type$String8 = R.gF(R.modules[\"builtin://global\"],\"defined-types\")[\"String\"];\nvar lists35 = R.gF($lists21,\"values\");\nvar lists43 = R.gF($lists21,\"types\");\nNAMESPACE = R.aMTN(NAMESPACE,[],[],$$import45);\nNAMESPACE = R.aMTN(NAMESPACE,[],[],$lists21);\nvar $toplevel50 = function _03a21b609295fa8706921499591c6de05a05276e378ee63ecd3a023126689be0__11($$resumer14) {\nvar $step49 = 0;\nvar $elidedFrames80 = 0;\nvar $ans77 = D;\nvar $al78 = L[11];\nif(R.isAR($$resumer14)) {\n$step49 = $$resumer14.step;\n$al78 = $$resumer14.from;\n$ans77 = $$resumer14.ans;\n$elidedFrames80 = $$resumer14.elidedFrames;\n$resumer14 = $$resumer14.args[0];\nis$s$sym149 = $$resumer14.vars[0];\ns$str129 = $$resumer14.vars[1];\nis$s$list112 = $$resumer14.vars[2];\nS$Exp153 = $$resumer14.vars[3];\nis$s$str127 = $$resumer14.vars[4];\ns$sym151 = $$resumer14.vars[5];\nprovides154 = $$resumer14.vars[6];\nis$S$Exp111 = $$resumer14.vars[7];\ns$num123 = $$resumer14.vars[8];\nList88 = $$resumer14.vars[9];\ns$list118 = $$resumer14.vars[10];\nis$s$num121 = $$resumer14.vars[11];\nanswer155 = $$resumer14.vars[12];\n}\nif(--R.GAS <= 0 || --R.RUNGAS <= 0) {\nR.EXN_STACKHEIGHT = 0;\n$ans77 = R.mC();\n}\nwhile(!R.isContinuation($ans77)) {\nswitch($step49) {\ncase 0: var S$Exp81 = R.nB(\"S-Exp\",L[8]);\nvar S$Exp153 = R.mBA(S$Exp81,\"S-Exp\");\nvar List88 = R.gDA(L[10],\"lists\",lists43,\"List\");\nvar S$Exp110 = {\"$var\":D};\nvar is$S$Exp111 = {\"$var\":D};\nvar is$s$list112 = {\"$var\":D};\nvar s$list118 = {\"$var\":D};\nvar is$s$num121 = {\"$var\":D};\nvar s$num123 = {\"$var\":D};\nvar is$s$str127 = {\"$var\":D};\nvar s$str129 = {\"$var\":D};\nvar is$s$sym149 = {\"$var\":D};\nvar s$sym151 = {\"$var\":D};\nvar $s$list_getfields86 = function singleton_variant(f) {\nreturn f(this.dict[\"exps\"]);\n};\nvar $s$list_mutablemask85 = [false];\nvar $s$list$base82 = {\"$fieldNames\":[\"exps\"],\n\"_match\":R.mM(\"s-list\",1)};\nvar $s$list$brander83 = R.nB(\"s-list\",L[0]);\nvar $s$list$brands84 = {};\n$s$list$brands84[S$Exp81._brand] = true;\n$s$list$brands84[$s$list$brander83._brand] = true;\nvar s$list87 = R.mVC(L[0],function $synthesizedConstructor_$s$list$base() {\nreturn [List88];\n},[\"exps89\"],[L[1]],[false],[\"exps89\"],$s$list_mutablemask85,$s$list$base82,$s$list$brands84,\"s-list\",$s$list_getfields86,$s$list$base82);\nvar $s$num_getfields94 = function singleton_variant(f) {\nreturn f(this.dict[\"n\"]);\n};\nvar $s$num_mutablemask93 = [false];\nvar $s$num$base90 = {\"$fieldNames\":[\"n\"],\n\"_match\":R.mM(\"s-num\",1)};\nvar $s$num$brander91 = R.nB(\"s-num\",L[2]);\nvar $s$num$brands92 = {};\n$s$num$brands92[S$Exp81._brand] = true;\n$s$num$brands92[$s$num$brander91._brand] = true;\nvar s$num95 = R.mVC(L[2],function $synthesizedConstructor_$s$num$base() {\nreturn [$type$Number3];\n},[\"n96\"],[L[3]],[false],[\"n96\"],$s$num_mutablemask93,$s$num$base90,$s$num$brands92,\"s-num\",$s$num_getfields94,$s$num$base90);\nvar $s$str_getfields101 = function singleton_variant(f) {\nreturn f(this.dict[\"s\"]);\n};\nvar $s$str_mutablemask100 = [false];\nvar $s$str$base97 = {\"$fieldNames\":[\"s\"],\n\"_match\":R.mM(\"s-str\",1)};\nvar $s$str$brander98 = R.nB(\"s-str\",L[4]);\nvar $s$str$brands99 = {};\n$s$str$brands99[S$Exp81._brand] = true;\n$s$str$brands99[$s$str$brander98._brand] = true;\nvar s$str102 = R.mVC(L[4],function $synthesizedConstructor_$s$str$base() {\nreturn [$type$String8];\n},[\"s103\"],[L[5]],[false],[\"s103\"],$s$str_mutablemask100,$s$str$base97,$s$str$brands99,\"s-str\",$s$str_getfields101,$s$str$base97);\nvar $s$sym_getfields108 = function singleton_variant(f) {\nreturn f(this.dict[\"s\"]);\n};\nvar $s$sym_mutablemask107 = [false];\nvar $s$sym$base104 = {\"$fieldNames\":[\"s\"],\n\"_match\":R.mM(\"s-sym\",1)};\nvar $s$sym$brander105 = R.nB(\"s-sym\",L[6]);\nvar $s$sym$brands106 = {};\n$s$sym$brands106[S$Exp81._brand] = true;\n$s$sym$brands106[$s$sym$brander105._brand] = true;\nvar s$sym109 = R.mVC(L[6],function $synthesizedConstructor_$s$sym$base() {\nreturn [$type$String8];\n},[\"s24\"],[L[7]],[false],[\"s24\"],$s$sym_mutablemask107,$s$sym$base104,$s$sym$brands106,\"s-sym\",$s$sym_getfields108,$s$sym$base104);\nvar anf_assign104 = R.mO({\"S-Exp\":G(S$Exp81,\"test\",L[8]),\n\"is-s-list\":G($s$list$brander83,\"test\",L[0]),\n\"s-list\":s$list87,\n\"is-s-num\":G($s$num$brander91,\"test\",L[2]),\n\"s-num\":s$num95,\n\"is-s-str\":G($s$str$brander98,\"test\",L[4]),\n\"s-str\":s$str102,\n\"is-s-sym\":G($s$sym$brander105,\"test\",L[6]),\n\"s-sym\":s$sym109});\nS$Exp110.$var = anf_assign104;\nR.nothing;\n$al78 = L[8];\nvar anf_assign106 = G(S$Exp110.$var,\"S-Exp\",L[8]);\nis$S$Exp111.$var = anf_assign106;\nR.nothing;\n$al78 = L[0];\nvar anf_assign108 = G(S$Exp110.$var,\"is-s-list\",L[0]);\nis$s$list112.$var = anf_assign108;\nR.nothing;\n$al78 = L[0];\nvar anf_assign117 = G(S$Exp110.$var,\"s-list\",L[0]);\ns$list118.$var = anf_assign117;\nR.nothing;\n$al78 = L[2];\nvar anf_assign120 = G(S$Exp110.$var,\"is-s-num\",L[2]);\nis$s$num121.$var = anf_assign120;\nR.nothing;\n$al78 = L[2];\nvar anf_assign122 = G(S$Exp110.$var,\"s-num\",L[2]);\ns$num123.$var = anf_assign122;\nR.nothing;\n$al78 = L[4];\nvar anf_assign126 = G(S$Exp110.$var,\"is-s-str\",L[4]);\nis$s$str127.$var = anf_assign126;\nR.nothing;\n$al78 = L[4];\nvar anf_assign128 = G(S$Exp110.$var,\"s-str\",L[4]);\ns$str129.$var = anf_assign128;\nR.nothing;\n$al78 = L[6];\nvar anf_assign148 = G(S$Exp110.$var,\"is-s-sym\",L[6]);\nis$s$sym149.$var = anf_assign148;\nR.nothing;\n$al78 = L[6];\nvar anf_assign150 = G(S$Exp110.$var,\"s-sym\",L[6]);\ns$sym151.$var = anf_assign150;\nR.nothing;\n$step49 = 1;\n$ans77 = R.maybeMethodCall2(builtins1,\"trace-value\",L[9],L[9],nothing2);\nbreak;\ncase 1: var answer155 = $ans77;\nvar provides154 = R.mO({\"is-S-Exp\":is$S$Exp111.$var,\n\"s-list\":s$list118.$var,\n\"is-s-list\":is$s$list112.$var,\n\"s-num\":s$num123.$var,\n\"is-s-num\":is$s$num121.$var,\n\"s-str\":s$str129.$var,\n\"is-s-str\":is$s$str127.$var,\n\"s-sym\":s$sym151.$var,\n\"is-s-sym\":is$s$sym149.$var});\n$step49 = 2;\n$ans77 = R.maybeMethodCall0(builtins1,\"current-checker\",L[8]);\nbreak;\ncase 2: var anf_method_obj152 = $ans77;\n$step49 = 3;\n$ans77 = R.maybeMethodCall0(anf_method_obj152,\"results\",L[8]);\nbreak;\ncase 3: var checks156 = $ans77;\n$step49 = 4;\n$ans77 = R.mO({\"answer\":answer155,\n\"namespace\":NAMESPACE,\n\"locations\":L,\n\"defined-values\":{\"is-S-Exp\":is$S$Exp111.$var,\n\"is-s-num\":is$s$num121.$var,\n\"is-s-sym\":is$s$sym149.$var,\n\"s-num\":s$num123.$var,\n\"s-sym\":s$sym151.$var,\n\"is-s-str\":is$s$str127.$var,\n\"lists\":lists35,\n\"s-str\":s$str129.$var,\n\"s-list\":s$list118.$var,\n\"is-s-list\":is$s$list112.$var},\n\"defined-types\":{\"S-Exp\":S$Exp153,\n\"lists\":lists43,\n\"List\":List88},\n\"provide-plus-types\":R.mO({\"values\":provides154,\n\"types\":{\"List\":List88,\n\"S-Exp\":S$Exp153}}),\n\"checks\":checks156});\nbreak;\ncase 4: ++R.GAS;\nreturn $ans77;\ndefault: R.ffi.throwSpinnakerError(L[11],$step49);\n}\n}\nif($step49 !== 4) {\n$ans77.stack[R.EXN_STACKHEIGHT++] = R.mAR($al78,$toplevel50,$step49,[],[is$s$sym149,s$str129,is$s$list112,S$Exp153,is$s$str127,s$sym151,provides154,is$S$Exp111,s$num123,List88,s$list118,is$s$num121,answer155],$elidedFrames80);\n}\nreturn $ans77;\n};\nreturn R.safeCall($toplevel50,function module_load(moduleVal) {\nR.modules[\"$builtin://s$exp$structs44\"] = moduleVal;\nreturn moduleVal;\n},\"Evaluating $toplevel\");\n}",
"nativeRequires":[],
"provides":{"values":{"is-s-list":{"bind":"fun",
"flatness":0,
"name":"is-s-list",
"typ":"tany"},
"s-list":{"bind":"fun",
"flatness":0,
"name":"s-list",
"typ":"tany"},
"s-str":{"bind":"fun",
"flatness":0,
"name":"s-str",
"typ":"tany"},
"is-s-str":{"bind":"fun",
"flatness":0,
"name":"is-s-str",
"typ":"tany"},
"s-sym":{"bind":"fun",
"flatness":0,
"name":"s-sym",
"typ":"tany"},
"s-num":{"bind":"fun",
"flatness":0,
"name":"s-num",
"typ":"tany"},
"is-s-sym":{"bind":"fun",
"flatness":0,
"name":"is-s-sym",
"typ":"tany"},
"is-s-num":{"bind":"fun",
"flatness":0,
"name":"is-s-num",
"typ":"tany"},
"is-S-Exp":"tany"},
"datatypes":{"atom#S-Exp#1":["data","S-Exp",[],[["s-list",
[["exps",
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://s-exp-structs"},
"name":"List"},[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://s-exp-structs"},
"name":"S-Exp"}]]]]],["s-num",
[["n",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}]]],["s-str",
[["s",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]],["s-sym",
[["s",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]]],{}]},
"aliases":{"List":"tany",
"S-Exp":"tany"}},
"requires":[{"import-type":"builtin",
"name":"global"},
{"import-type":"builtin",
"name":"lists"}]})