({"theMap":"{\"version\":3,\"sources\":[\"builtin://equality\"],\"names\":[\"builtin://equality\",\",8,0,81,12,3,208\",\",9,2,104,9,9,111\",\",10,2,114,10,46,158\",\",11,2,161,11,45,204\",\",16,6,284,16,22,300\",\",17,6,317,17,22,333\",\",18,6,350,18,21,365\",\",25,6,542,25,19,555\",\",26,6,572,26,19,585\",\",27,6,602,27,21,617\",\",34,34,829,34,67,862\",\",34,28,823,34,68,863\"],\"mappingsmBAODC,8CAPCD;AAAAA;AAAAA;AAAAA;AAAAA,mBAQCE,wCARDF;AAAAA;AAAAA;AAAAA;AAAAA,mBAQCE,qCARDF;AAAAA;AAAAA;AAAAA;AAAAA,mBASCG,2CATDH;AAAAA;AAAAA;AAAAA;AAAAA,mBASCG,wCATDH;AAAAA;AAAAA;AAAAA;AAAAA,mBAUCI,0CAVDJ;AAAAA;AAAAA;AAAAA;AAAAA,mBAUCI,uCAVDJ;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAeKK,sCAfLL;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAgBKM,sCAhBLN;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAiBKO,qCAjBLP;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAwBKQ,mCAxBLR;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAyBKS,mCAzBLT;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AA0BKU,qiCiCW,oEAjCjCX;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAiC2BY,mCAjC3BZ;AAAAA;AAiC2BY,gCAjC3BZ;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,SAODC,oDAPCD;AAAAA;AAAAA;AAAAA;AAAAA,SAODC,oDAPCD;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA\",\"file\":\"builtin://equality\"}",
"theModule":"function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__22(R,NAMESPACE,M,$error16,$$import17) {\nvar G = R.getFieldLoc;\nvar U = function throw_error(loc,name) {\nR.ffi.throwUninitializedIdMkLoc(loc,name);\n};\nvar M = \"builtin://equality\";\nvar D = R.undefined;\nvar L = [[M,9,2,104,9,9,111],\n[M,10,2,114,10,46,158],\n[M,10,23,135,10,29,141],\n[M,11,2,161,11,45,204],\n[M,11,22,181,11,28,187],\n[M,8,0,81,12,3,208],\n[M,14,0,210,21,3,467],\n[M,14,21,231,14,35,245],\n[M,14,44,254,14,58,268],\n[M,23,0,469,30,3,727],\n[M,23,20,489,23,34,503],\n[M,23,43,512,23,57,526],\n[M,32,0,729,38,3,924],\n[M,34,34,829,34,67,862],\n[M,34,28,823,34,68,863],\n[M,34,4,799,34,68,863],\n[M,33,2,769,37,5,920],\n[M,35,4,868,35,19,883],\n[M,36,4,888,36,30,914],\n[M,33,8,775,33,22,789],\n[M,32,21,750,32,35,764],\n[\"dummy location\"],\n[M,3,0,13,38,3,924]];\nvar builtins1 = R.gF(R.modules[\"builtin://global\"],\"defined-values\")[\"builtins\"];\nvar nothing2 = R.gF(R.modules[\"builtin://global\"],\"defined-values\")[\"nothing\"];\nvar raise1 = R.gF(R.modules[\"builtin://global\"],\"defined-values\")[\"raise\"];\nvar $type$String8 = R.gF(R.modules[\"builtin://global\"],\"defined-types\")[\"String\"];\nvar error2 = R.gF($error16,\"values\");\nvar error13 = R.gF($error16,\"types\");\nNAMESPACE = R.aMTN(NAMESPACE,[],[],$error16);\nNAMESPACE = R.aMTN(NAMESPACE,[],[],$$import17);\nvar $cases_dispatch126 = {\"Unknown\":3,\n\"Equal\":5,\n\"NotEqual\":6};\nvar $toplevel19 = function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__22($$resumer14) {\nvar $step18 = 0;\nvar $elidedFrames24 = 0;\nvar $ans21 = D;\nvar $al22 = L[22];\nif(R.isAR($$resumer14)) {\n$step18 = $$resumer14.step;\n$al22 = $$resumer14.from;\n$ans21 = $$resumer14.ans;\n$elidedFrames24 = $$resumer14.elidedFrames;\n$resumer14 = $$resumer14.args[0];\nis$Unknown55 = $$resumer14.vars[0];\nUnknown56 = $$resumer14.vars[1];\nequal$and76 = $$resumer14.vars[2];\nNotEqual54 = $$resumer14.vars[3];\nprovides133 = $$resumer14.vars[4];\nis$Equal51 = $$resumer14.vars[5];\nequal$or101 = $$resumer14.vars[6];\nEqualityResult73 = $$resumer14.vars[7];\nis$NotEqual53 = $$resumer14.vars[8];\nto$boolean131 = $$resumer14.vars[9];\nEqual52 = $$resumer14.vars[10];\nanswer134 = $$resumer14.vars[11];\nis$EqualityResult50 = $$resumer14.vars[12];\n}\nif(--R.GAS <= 0 || --R.RUNGAS <= 0) {\nR.EXN_STACKHEIGHT = 0;\n$ans21 = R.mC();\n}\nwhile(!R.isContinuation($ans21)) {\nswitch($step18) {\ncase 0: var EqualityResult25 = R.nB(\"EqualityResult\",L[5]);\nvar EqualityResult73 = R.mBA(EqualityResult25,\"EqualityResult\");\nvar EqualityResult49 = {\"$var\":D};\nvar is$EqualityResult50 = {\"$var\":D};\nvar is$Equal51 = {\"$var\":D};\nvar Equal52 = {\"$var\":D};\nvar is$NotEqual53 = {\"$var\":D};\nvar NotEqual54 = {\"$var\":D};\nvar is$Unknown55 = {\"$var\":D};\nvar Unknown56 = {\"$var\":D};\nvar equal$and76 = {\"$var\":D};\nvar equal$or101 = {\"$var\":D};\nvar to$boolean131 = {\"$var\":D};\nvar $Equal_getfields30 = function variant(f) {\nreturn f();\n};\nvar $Equal_mutablemask29 = [];\nvar $Equal$base26 = {\"_match\":R.mM(\"Equal\",0)};\nvar $Equal$brander27 = R.nB(\"Equal\",L[0]);\nvar $Equal$brands28 = {};\n$Equal$brands28[EqualityResult25._brand] = true;\n$Equal$brands28[$Equal$brander27._brand] = true;\nvar $NotEqual_getfields35 = function singleton_variant(f) {\nreturn f(this.dict[\"reason\"],this.dict[\"value1\"],this.dict[\"value2\"]);\n};\nvar $NotEqual_mutablemask34 = [false,false,false];\nvar $NotEqual$base31 = {\"$fieldNames\":[\"reason\",\"value1\",\"value2\"],\n\"_match\":R.mM(\"NotEqual\",3)};\nvar $NotEqual$brander32 = R.nB(\"NotEqual\",L[1]);\nvar $NotEqual$brands33 = {};\n$NotEqual$brands33[EqualityResult25._brand] = true;\n$NotEqual$brands33[$NotEqual$brander32._brand] = true;\nvar NotEqual36 = R.mVC(L[1],function $synthesizedConstructor_$NotEqual$base() {\nreturn [$type$String8];\n},[\"reason37\"],[L[2]],[false,false,false],[\"reason37\",\"value138\",\"value239\"],$NotEqual_mutablemask34,$NotEqual$base31,$NotEqual$brands33,\"NotEqual\",$NotEqual_getfields35,$NotEqual$base31);\nvar $Unknown_getfields44 = function singleton_variant(f) {\nreturn f(this.dict[\"reason\"],this.dict[\"value1\"],this.dict[\"value2\"]);\n};\nvar $Unknown_mutablemask43 = [false,false,false];\nvar $Unknown$base40 = {\"$fieldNames\":[\"reason\",\"value1\",\"value2\"],\n\"_match\":R.mM(\"Unknown\",3)};\nvar $Unknown$brander41 = R.nB(\"Unknown\",L[3]);\nvar $Unknown$brands42 = {};\n$Unknown$brands42[EqualityResult25._brand] = true;\n$Unknown$brands42[$Unknown$brander41._brand] = true;\nvar Unknown45 = R.mVC(L[3],function $synthesizedConstructor_$Unknown$base() {\nreturn [$type$String8];\n},[\"reason46\"],[L[4]],[false,false,false],[\"reason46\",\"value147\",\"value248\"],$Unknown_mutablemask43,$Unknown$base40,$Unknown$brands42,\"Unknown\",$Unknown_getfields44,$Unknown$base40);\nvar anf_assign93 = R.mO({\"EqualityResult\":G(EqualityResult25,\"test\",L[5]),\n\"is-Equal\":G($Equal$brander27,\"test\",L[0]),\n\"Equal\":R.mDV($Equal$base26,$Equal$brands28,\"Equal\",$Equal_getfields30,-1,$Equal_mutablemask29,$Equal$base26,false,L[0]),\n\"is-NotEqual\":G($NotEqual$brander32,\"test\",L[1]),\n\"NotEqual\":NotEqual36,\n\"is-Unknown\":G($Unknown$brander41,\"test\",L[3]),\n\"Unknown\":Unknown45});\nEqualityResult49.$var = anf_assign93;\nR.nothing;\n$al22 = L[5];\nvar anf_assign95 = G(EqualityResult49.$var,\"EqualityResult\",L[5]);\nis$EqualityResult50.$var = anf_assign95;\nR.nothing;\n$al22 = L[0];\nvar anf_assign97 = G(EqualityResult49.$var,\"is-Equal\",L[0]);\nis$Equal51.$var = anf_assign97;\nR.nothing;\n$al22 = L[0];\nvar anf_assign99 = G(EqualityResult49.$var,\"Equal\",L[0]);\nEqual52.$var = anf_assign99;\nR.nothing;\n$al22 = L[1];\nvar anf_assign81 = G(EqualityResult49.$var,\"is-NotEqual\",L[1]);\nis$NotEqual53.$var = anf_assign81;\nR.nothing;\n$al22 = L[1];\nvar anf_assign83 = G(EqualityResult49.$var,\"NotEqual\",L[1]);\nNotEqual54.$var = anf_assign83;\nR.nothing;\n$al22 = L[3];\nvar anf_assign85 = G(EqualityResult49.$var,\"is-Unknown\",L[3]);\nis$Unknown55.$var = anf_assign85;\nR.nothing;\n$al22 = L[3];\nvar anf_assign87 = G(EqualityResult49.$var,\"Unknown\",L[3]);\nUnknown56.$var = anf_assign87;\nR.nothing;\nvar $temp_lam58 = function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__6($er159,$er260) {\nvar $step57 = 0;\nvar $elidedFrames64 = 0;\nvar $ans61 = D;\nvar $al62 = L[6];\nif(R.isAR($er159)) {\n$step57 = $er159.step;\n$al62 = $er159.from;\n$ans61 = $er159.ans;\n$elidedFrames64 = $er159.elidedFrames;\ner159 = $er159.args[0];\ner260 = $er159.args[1];\n} else {\nvar $l = arguments.length;\nif($l !== 2) {\nvar $t = new Array($l);\nfor(var $i = 0;$i < $l;++$i) {\n$t[$i] = arguments[$i];\n}\nR.cAC(L[6],2,$t,false);\n}\nvar er159 = $er159;\nvar er260 = $er260;\n}\nif(--R.GAS <= 0 || --R.RUNGAS <= 0) {\nR.EXN_STACKHEIGHT = 0;\n$ans61 = R.mC();\n}\nwhile(!R.isContinuation($ans61)) {\nswitch($step57) {\ncase 0: $step57 = 1;\n$al62 = L[7];\nvar $ann$check72 = R._cA(L[7],EqualityResult73,er159);\nif(R.isContinuation($ann$check72)) {\n$ans61 = $ann$check72;\n}\nbreak;\ncase 1: $step57 = 2;\n$al62 = L[8];\nvar $ann$check74 = R._cA(L[8],EqualityResult73,er260);\nif(R.isContinuation($ann$check74)) {\n$ans61 = $ann$check74;\n}\nbreak;\ncase 2: // caller optimization;\n$ans61 = is$NotEqual53.$var.app(er159);\nvar anf_if68 = $ans61;\n$step57 = R.checkPyretTrue(anf_if68)?3:4;\nbreak;\ncase 3: $step57 = 9;\n$ans61 = er159;\nbreak;\ncase 4: // caller optimization;\n$ans61 = is$NotEqual53.$var.app(er260);\nvar anf_if66 = $ans61;\n$step57 = R.checkPyretTrue(anf_if66)?5:6;\nbreak;\ncase 5: $step57 = 9;\n$ans61 = er260;\nbreak;\ncase 6: // caller optimization;\n$ans61 = is$Unknown55.$var.app(er159);\nvar anf_if65 = $ans61;\n$step57 = R.checkPyretTrue(anf_if65)?7:8;\nbreak;\ncase 7: $step57 = 9;\n$ans61 = er159;\nbreak;\ncase 8: $step57 = 9;\n$ans61 = er260;\nbreak;\ncase 9: ++R.GAS;\nreturn $ans61;\ndefault: R.ffi.throwSpinnakerError(L[6],$step57);\n}\n}\nif($step57 !== 9) {\n$ans61.stack[R.EXN_STACKHEIGHT++] = R.mAR($al62,$temp_lam58,$step57,[er159,er260],[],$elidedFrames64);\n}\nreturn $ans61;\n};\nvar anf_assign96 = R.mF($temp_lam58,\"equal-and\");\nequal$and76.$var = anf_assign96;\nR.nothing;\nvar $temp_lam78 = function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__9($er179,$er280) {\nvar $step77 = 0;\nvar $elidedFrames84 = 0;\nvar $ans81 = D;\nvar $al82 = L[9];\nif(R.isAR($er179)) {\n$step77 = $er179.step;\n$al82 = $er179.from;\n$ans81 = $er179.ans;\n$elidedFrames84 = $er179.elidedFrames;\ner179 = $er179.args[0];\ner280 = $er179.args[1];\n} else {\nvar $l = arguments.length;\nif($l !== 2) {\nvar $t = new Array($l);\nfor(var $i = 0;$i < $l;++$i) {\n$t[$i] = arguments[$i];\n}\nR.cAC(L[9],2,$t,false);\n}\nvar er179 = $er179;\nvar er280 = $er280;\n}\nif(--R.GAS <= 0 || --R.RUNGAS <= 0) {\nR.EXN_STACKHEIGHT = 0;\n$ans81 = R.mC();\n}\nwhile(!R.isContinuation($ans81)) {\nswitch($step77) {\ncase 0: $step77 = 1;\n$al82 = L[10];\nvar $ann$check88 = R._cA(L[10],EqualityResult73,er179);\nif(R.isContinuation($ann$check88)) {\n$ans81 = $ann$check88;\n}\nbreak;\ncase 1: $step77 = 2;\n$al82 = L[11];\nvar $ann$check89 = R._cA(L[11],EqualityResult73,er280);\nif(R.isContinuation($ann$check89)) {\n$ans81 = $ann$check89;\n}\nbreak;\ncase 2: // caller optimization;\n$ans81 = is$Equal51.$var.app(er179);\nvar anf_if87 = $ans81;\n$step77 = R.checkPyretTrue(anf_if87)?3:4;\nbreak;\ncase 3: $step77 = 9;\n$ans81 = er179;\nbreak;\ncase 4: // caller optimization;\n$ans81 = is$Equal51.$var.app(er280);\nvar anf_if86 = $ans81;\n$step77 = R.checkPyretTrue(anf_if86)?5:6;\nbreak;\ncase 5: $step77 = 9;\n$ans81 = er280;\nbreak;\ncase 6: // caller optimization;\n$ans81 = is$Unknown55.$var.app(er179);\nvar anf_if85 = $ans81;\n$step77 = R.checkPyretTrue(anf_if85)?7:8;\nbreak;\ncase 7: $step77 = 9;\n$ans81 = er179;\nbreak;\ncase 8: $step77 = 9;\n$ans81 = er280;\nbreak;\ncase 9: ++R.GAS;\nreturn $ans81;\ndefault: R.ffi.throwSpinnakerError(L[9],$step77);\n}\n}\nif($step77 !== 9) {\n$ans81.stack[R.EXN_STACKHEIGHT++] = R.mAR($al82,$temp_lam78,$step77,[er179,er280],[],$elidedFrames84);\n}\nreturn $ans81;\n};\nvar anf_assign100 = R.mF($temp_lam78,\"equal-or\");\nequal$or101.$var = anf_assign100;\nR.nothing;\nvar $temp_lam103 = function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__12($er104) {\nvar $step102 = 0;\nvar $elidedFrames108 = 0;\nvar $ans105 = D;\nvar $al106 = L[12];\nif(R.isAR($er104)) {\n$step102 = $er104.step;\n$al106 = $er104.from;\n$ans105 = $er104.ans;\n$elidedFrames108 = $er104.elidedFrames;\ner104 = $er104.args[0];\ncases109 = $er104.vars[0];\n} else {\nvar $l = arguments.length;\nif($l !== 1) {\nvar $t = new Array($l);\nfor(var $i = 0;$i < $l;++$i) {\n$t[$i] = arguments[$i];\n}\nR.cAC(L[12],1,$t,false);\n}\nvar er104 = $er104;\n}\nif(--R.GAS <= 0 || --R.RUNGAS <= 0) {\nR.EXN_STACKHEIGHT = 0;\n$ans105 = R.mC();\n}\nwhile(!R.isContinuation($ans105)) {\nswitch($step102) {\ncase 0: $step102 = 1;\n$al106 = L[20];\nvar $ann$check128 = R._cA(L[20],EqualityResult73,er104);\nif(R.isContinuation($ann$check128)) {\n$ans105 = $ann$check128;\n}\nbreak;\ncase 1: var cases109 = er104;\n$step102 = 2;\n$al106 = L[19];\nvar $ann$check127 = R._cA(L[19],EqualityResult73,cases109);\nif(R.isContinuation($ann$check127)) {\n$ans105 = $ann$check127;\n}\nbreak;\ncase 2: $al106 = L[16];\n$step102 = $cases_dispatch126[cases109.$name] || 7;\nbreak;\ncase 3: if(cases109.$arity !== 3) {\nif(cases109.$arity >= 0) {\nR.ffi.throwCasesArityErrorC(L[15],3,cases109.$arity,L[16],cases109.$loc);\n} else {\nR.ffi.throwCasesSingletonErrorC(L[15],true,L[16],cases109.$loc);\n}\n}\nvar $fn120 = cases109.$constructor.$fieldNames;\nvar r110 = R.dF(cases109.dict[$fn120[0]],cases109.$mut_fields_mask[0],false);\nvar v1111 = R.dF(cases109.dict[$fn120[1]],cases109.$mut_fields_mask[1],false);\nvar v2112 = R.dF(cases109.dict[$fn120[2]],cases109.$mut_fields_mask[2],false);\n$step102 = 4;\n$ans105 = R.maybeMethodCall3(error2,\"equality-failure\",L[13],r110,v1111,v2112);\nbreak;\ncase 4: var anf_arg118 = $ans105;\n$step102 = 8;\n$al106 = L[14];\nif(typeof(raise1.app) !== \"function\") {\nR.ffi.throwNonFunApp($al106,raise1);\n}\n$ans105 = raise1.app(anf_arg118);\nbreak;\ncase 5: if(cases109.$arity !== -1) {\nR.ffi.throwCasesSingletonErrorC(L[17],false,L[16],cases109.$loc);\n}\n$step102 = 8;\n$ans105 = (true);\nbreak;\ncase 6: if(cases109.$arity !== 3) {\nif(cases109.$arity >= 0) {\nR.ffi.throwCasesArityErrorC(L[18],3,cases109.$arity,L[16],cases109.$loc);\n} else {\nR.ffi.throwCasesSingletonErrorC(L[18],true,L[16],cases109.$loc);\n}\n}\nvar $fn122 = cases109.$constructor.$fieldNames;\nR.dF(cases109.dict[$fn122[0]],cases109.$mut_fields_mask[0],false);\nR.dF(cases109.dict[$fn122[1]],cases109.$mut_fields_mask[1],false);\nR.dF(cases109.dict[$fn122[2]],cases109.$mut_fields_mask[2],false);\n$step102 = 8;\n$ans105 = (false);\nbreak;\ncase 7: $step102 = 8;\n$al106 = L[16];\n$ans105 = R.throwNoCasesMatched(L[16],cases109);\nbreak;\ncase 8: ++R.GAS;\nreturn $ans105;\ndefault: R.ffi.throwSpinnakerError(L[12],$step102);\n}\n}\nif($step102 !== 8) {\n$ans105.stack[R.EXN_STACKHEIGHT++] = R.mAR($al106,$temp_lam103,$step102,[er104],[cases109],$elidedFrames108);\n}\nreturn $ans105;\n};\nvar anf_assign130 = R.mF($temp_lam103,\"to-boolean\");\nto$boolean131.$var = anf_assign130;\nR.nothing;\n$step18 = 1;\n$ans21 = R.maybeMethodCall2(builtins1,\"trace-value\",L[21],L[21],nothing2);\nbreak;\ncase 1: var answer134 = $ans21;\nvar provides133 = R.mO({\"is-EqualityResult\":is$EqualityResult50.$var,\n\"Equal\":Equal52.$var,\n\"is-Equal\":is$Equal51.$var,\n\"NotEqual\":NotEqual54.$var,\n\"is-NotEqual\":is$NotEqual53.$var,\n\"Unknown\":Unknown56.$var,\n\"is-Unknown\":is$Unknown55.$var,\n\"equal-and\":equal$and76.$var,\n\"equal-or\":equal$or101.$var,\n\"to-boolean\":to$boolean131.$var});\n$step18 = 2;\n$ans21 = R.maybeMethodCall0(builtins1,\"current-checker\",L[5]);\nbreak;\ncase 2: var anf_method_obj132 = $ans21;\n$step18 = 3;\n$ans21 = R.maybeMethodCall0(anf_method_obj132,\"results\",L[5]);\nbreak;\ncase 3: var checks135 = $ans21;\n$step18 = 4;\n$ans21 = R.mO({\"answer\":answer134,\n\"namespace\":NAMESPACE,\n\"locations\":L,\n\"defined-values\":{\"NotEqual\":NotEqual54.$var,\n\"is-NotEqual\":is$NotEqual53.$var,\n\"is-Unknown\":is$Unknown55.$var,\n\"error\":error2,\n\"Unknown\":Unknown56.$var,\n\"is-Equal\":is$Equal51.$var,\n\"Equal\":Equal52.$var,\n\"to-boolean\":to$boolean131.$var,\n\"is-EqualityResult\":is$EqualityResult50.$var,\n\"equal-or\":equal$or101.$var,\n\"equal-and\":equal$and76.$var},\n\"defined-types\":{\"error\":error13,\n\"EqualityResult\":EqualityResult73},\n\"provide-plus-types\":R.mO({\"values\":provides133,\n\"types\":{\"EqualityResult\":EqualityResult73}}),\n\"checks\":checks135});\nbreak;\ncase 4: ++R.GAS;\nreturn $ans21;\ndefault: R.ffi.throwSpinnakerError(L[22],$step18);\n}\n}\nif($step18 !== 4) {\n$ans21.stack[R.EXN_STACKHEIGHT++] = R.mAR($al22,$toplevel19,$step18,[],[is$Unknown55,Unknown56,equal$and76,NotEqual54,provides133,is$Equal51,equal$or101,EqualityResult73,is$NotEqual53,to$boolean131,Equal52,answer134,is$EqualityResult50],$elidedFrames24);\n}\nreturn $ans21;\n};\nreturn R.safeCall($toplevel19,function module_load(moduleVal) {\nR.modules[\"$builtin://equality15\"] = moduleVal;\nreturn moduleVal;\n},\"Evaluating $toplevel\");\n}",
"nativeRequires":[],
"provides":{"values":{"equal-and":"tany",
"equal-or":"tany",
"is-EqualityResult":"tany",
"to-boolean":"tany",
"Equal":"tany",
"is-Equal":{"bind":"fun",
"flatness":0,
"name":"is-Equal",
"typ":"tany"},
"Unknown":{"bind":"fun",
"flatness":0,
"name":"Unknown",
"typ":"tany"},
"is-Unknown":{"bind":"fun",
"flatness":0,
"name":"is-Unknown",
"typ":"tany"},
"is-NotEqual":{"bind":"fun",
"flatness":0,
"name":"is-NotEqual",
"typ":"tany"},
"NotEqual":{"bind":"fun",
"flatness":0,
"name":"NotEqual",
"typ":"tany"}},
"datatypes":{"atom#EqualityResult#1":["data","EqualityResult",[],[["Equal"],["NotEqual",
[["reason",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["value1",
"tany"],["value2",
"tany"]]],["Unknown",
[["reason",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["value1",
"tany"],["value2",
"tany"]]]],{}]},
"aliases":{"EqualityResult":"tany"}},
"requires":[{"import-type":"builtin",
"name":"error"},
{"import-type":"builtin",
"name":"global"}]})