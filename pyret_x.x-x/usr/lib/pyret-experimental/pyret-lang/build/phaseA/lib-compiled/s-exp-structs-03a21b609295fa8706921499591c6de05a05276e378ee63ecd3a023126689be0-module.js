({"theMap":"{\"version\":3,\"sources\":[\"builtin://s-exp-structs\"],\"names\":[\"builtin://s-exp-structs\",\",10,0,105,15,3,221\",\",11,2,119,11,31,148\",\",12,2,151,12,22,171\",\",13,2,174,13,22,194\",\",14,2,197,14,22,217\"],\"mappings\":\"AAACA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,oBASDC,6BATCD;AAAAA;AAAAA;AAAAA;AAAAA,oBAUCE,iCAVDF;AAAAA;AAAAA;AAAAA;AAAAA,oBAUCE,8BAVDF;AAAAA;AAAAA;AAAAA;AAAAA,oBAWCG,gCAXDH;AAAAA;AAAAA;AAAAA;AAAAA,oBAWCG,6BAXDH;AAAAA;AAAAA;AAAAA;AAAAA,oBAYCI,gCAZDJ;AAAAA;AAAAA;AAAAA;AAAAA,oBAYCI,6BAZDJ;AAAAA;AAAAA;AAAAA;AAAAA,mBAaCK,gCAbDL;AAAAA;AAAAA;AAAAA;AAAAA,mBAaCK,6BAbDL;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,SASDC,oDATCD;AAAAA;AAAAA;AAAAA;AAAAA,SASDC,oDATCD;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA\",\"file\":\"builtin://s-exp-structs\"}",
"theModule":"function _03a21b609295fa8706921499591c6de05a05276e378ee63ecd3a023126689be0__6(R,NAMESPACE,M,$$import45,$lists20) {\nvar G = R.getFieldLoc;\nvar U = function throw_error(loc,name) {\nR.ffi.throwUninitializedIdMkLoc(loc,name);\n};\nvar M = \"builtin://s-exp-structs\";\nvar D = R.undefined;\nvar L = [[M,11,2,119,11,31,148],\n[M,12,2,151,12,22,171],\n[M,13,2,174,13,22,194],\n[M,14,2,197,14,22,217],\n[M,10,0,105,15,3,221],\n[\"dummy location\"],\n[M,3,0,13,15,3,221]];\nvar builtins1 = R.gF(R.modules[\"builtin://global\"],\"defined-values\")[\"builtins\"];\nvar nothing2 = R.gF(R.modules[\"builtin://global\"],\"defined-values\")[\"nothing\"];\nvar lists35 = R.gF($lists20,\"values\");\nvar lists43 = R.gF($lists20,\"types\");\nNAMESPACE = R.aMTN(NAMESPACE,[],[],$$import45);\nNAMESPACE = R.aMTN(NAMESPACE,[],[],$lists20);\nvar $toplevel49 = function _03a21b609295fa8706921499591c6de05a05276e378ee63ecd3a023126689be0__6($$resumer14) {\nvar $step48 = 0;\nvar $elidedFrames88 = 0;\nvar $ans85 = D;\nvar $al86 = L[6];\nif(R.isAR($$resumer14)) {\n$step48 = $$resumer14.step;\n$al86 = $$resumer14.from;\n$ans85 = $$resumer14.ans;\n$elidedFrames88 = $$resumer14.elidedFrames;\n$resumer14 = $$resumer14.args[0];\nis$s$str159 = $$resumer14.vars[0];\nis$s$list119 = $$resumer14.vars[1];\ns$sym163 = $$resumer14.vars[2];\ns$num155 = $$resumer14.vars[3];\ns$list124 = $$resumer14.vars[4];\nprovides165 = $$resumer14.vars[5];\ns$str161 = $$resumer14.vars[6];\nis$s$sym162 = $$resumer14.vars[7];\nis$S$Exp118 = $$resumer14.vars[8];\nanswer166 = $$resumer14.vars[9];\nis$s$num126 = $$resumer14.vars[10];\n}\nif(--R.GAS <= 0 || --R.RUNGAS <= 0) {\nR.EXN_STACKHEIGHT = 0;\n$ans85 = R.mC();\n}\nwhile(!R.isContinuation($ans85)) {\nswitch($step48) {\ncase 0: var S$Exp89 = R.nB(\"S-Exp\",L[4]);\nR.mBA(S$Exp89,\"S-Exp\");\nvar S$Exp117 = {\"$var\":D};\nvar is$S$Exp118 = {\"$var\":D};\nvar is$s$list119 = {\"$var\":D};\nvar s$list124 = {\"$var\":D};\nvar is$s$num126 = {\"$var\":D};\nvar s$num155 = {\"$var\":D};\nvar is$s$str159 = {\"$var\":D};\nvar s$str161 = {\"$var\":D};\nvar is$s$sym162 = {\"$var\":D};\nvar s$sym163 = {\"$var\":D};\nvar $s$list_getfields94 = function singleton_variant(f) {\nreturn f(this.dict[\"exps\"]);\n};\nvar $s$list_mutablemask93 = [false];\nvar $s$list$base90 = {\"$fieldNames\":[\"exps\"],\n\"_match\":R.mM(\"s-list\",1)};\nvar $s$list$brander91 = R.nB(\"s-list\",L[0]);\nvar $s$list$brands92 = {};\n$s$list$brands92[S$Exp89._brand] = true;\n$s$list$brands92[$s$list$brander91._brand] = true;\nvar s$list95 = R.mVC(L[0],function $synthesizedConstructor_$s$list$base() {\nreturn [];\n},[],[],[false],[\"exps96\"],$s$list_mutablemask93,$s$list$base90,$s$list$brands92,\"s-list\",$s$list_getfields94,$s$list$base90);\nvar $s$num_getfields101 = function singleton_variant(f) {\nreturn f(this.dict[\"n\"]);\n};\nvar $s$num_mutablemask100 = [false];\nvar $s$num$base97 = {\"$fieldNames\":[\"n\"],\n\"_match\":R.mM(\"s-num\",1)};\nvar $s$num$brander98 = R.nB(\"s-num\",L[1]);\nvar $s$num$brands99 = {};\n$s$num$brands99[S$Exp89._brand] = true;\n$s$num$brands99[$s$num$brander98._brand] = true;\nvar s$num102 = R.mVC(L[1],function $synthesizedConstructor_$s$num$base() {\nreturn [];\n},[],[],[false],[\"n103\"],$s$num_mutablemask100,$s$num$base97,$s$num$brands99,\"s-num\",$s$num_getfields101,$s$num$base97);\nvar $s$str_getfields108 = function singleton_variant(f) {\nreturn f(this.dict[\"s\"]);\n};\nvar $s$str_mutablemask107 = [false];\nvar $s$str$base104 = {\"$fieldNames\":[\"s\"],\n\"_match\":R.mM(\"s-str\",1)};\nvar $s$str$brander105 = R.nB(\"s-str\",L[2]);\nvar $s$str$brands106 = {};\n$s$str$brands106[S$Exp89._brand] = true;\n$s$str$brands106[$s$str$brander105._brand] = true;\nvar s$str109 = R.mVC(L[2],function $synthesizedConstructor_$s$str$base() {\nreturn [];\n},[],[],[false],[\"s110\"],$s$str_mutablemask107,$s$str$base104,$s$str$brands106,\"s-str\",$s$str_getfields108,$s$str$base104);\nvar $s$sym_getfields115 = function singleton_variant(f) {\nreturn f(this.dict[\"s\"]);\n};\nvar $s$sym_mutablemask114 = [false];\nvar $s$sym$base111 = {\"$fieldNames\":[\"s\"],\n\"_match\":R.mM(\"s-sym\",1)};\nvar $s$sym$brander112 = R.nB(\"s-sym\",L[3]);\nvar $s$sym$brands113 = {};\n$s$sym$brands113[S$Exp89._brand] = true;\n$s$sym$brands113[$s$sym$brander112._brand] = true;\nvar s$sym116 = R.mVC(L[3],function $synthesizedConstructor_$s$sym$base() {\nreturn [];\n},[],[],[false],[\"s24\"],$s$sym_mutablemask114,$s$sym$base111,$s$sym$brands113,\"s-sym\",$s$sym_getfields115,$s$sym$base111);\nvar anf_assign102 = R.mO({\"S-Exp\":G(S$Exp89,\"test\",L[4]),\n\"is-s-list\":G($s$list$brander91,\"test\",L[0]),\n\"s-list\":s$list95,\n\"is-s-num\":G($s$num$brander98,\"test\",L[1]),\n\"s-num\":s$num102,\n\"is-s-str\":G($s$str$brander105,\"test\",L[2]),\n\"s-str\":s$str109,\n\"is-s-sym\":G($s$sym$brander112,\"test\",L[3]),\n\"s-sym\":s$sym116});\nS$Exp117.$var = anf_assign102;\nR.nothing;\n$al86 = L[4];\nvar anf_assign104 = G(S$Exp117.$var,\"S-Exp\",L[4]);\nis$S$Exp118.$var = anf_assign104;\nR.nothing;\n$al86 = L[0];\nvar anf_assign106 = G(S$Exp117.$var,\"is-s-list\",L[0]);\nis$s$list119.$var = anf_assign106;\nR.nothing;\n$al86 = L[0];\nvar anf_assign123 = G(S$Exp117.$var,\"s-list\",L[0]);\ns$list124.$var = anf_assign123;\nR.nothing;\n$al86 = L[1];\nvar anf_assign125 = G(S$Exp117.$var,\"is-s-num\",L[1]);\nis$s$num126.$var = anf_assign125;\nR.nothing;\n$al86 = L[1];\nvar anf_assign154 = G(S$Exp117.$var,\"s-num\",L[1]);\ns$num155.$var = anf_assign154;\nR.nothing;\n$al86 = L[2];\nvar anf_assign158 = G(S$Exp117.$var,\"is-s-str\",L[2]);\nis$s$str159.$var = anf_assign158;\nR.nothing;\n$al86 = L[2];\nvar anf_assign160 = G(S$Exp117.$var,\"s-str\",L[2]);\ns$str161.$var = anf_assign160;\nR.nothing;\n$al86 = L[3];\nvar anf_assign72 = G(S$Exp117.$var,\"is-s-sym\",L[3]);\nis$s$sym162.$var = anf_assign72;\nR.nothing;\n$al86 = L[3];\nvar anf_assign74 = G(S$Exp117.$var,\"s-sym\",L[3]);\ns$sym163.$var = anf_assign74;\nR.nothing;\n$step48 = 1;\n$ans85 = R.maybeMethodCall2(builtins1,\"trace-value\",L[5],L[5],nothing2);\nbreak;\ncase 1: var answer166 = $ans85;\nvar provides165 = R.mO({\"is-S-Exp\":is$S$Exp118.$var,\n\"s-list\":s$list124.$var,\n\"is-s-list\":is$s$list119.$var,\n\"s-num\":s$num155.$var,\n\"is-s-num\":is$s$num126.$var,\n\"s-str\":s$str161.$var,\n\"is-s-str\":is$s$str159.$var,\n\"s-sym\":s$sym163.$var,\n\"is-s-sym\":is$s$sym162.$var});\n$step48 = 2;\n$ans85 = R.maybeMethodCall0(builtins1,\"current-checker\",L[4]);\nbreak;\ncase 2: var anf_method_obj164 = $ans85;\n$step48 = 3;\n$ans85 = R.maybeMethodCall0(anf_method_obj164,\"results\",L[4]);\nbreak;\ncase 3: var checks167 = $ans85;\n$step48 = 4;\n$ans85 = R.mO({\"answer\":answer166,\n\"namespace\":NAMESPACE,\n\"locations\":L,\n\"defined-values\":{\"is-S-Exp\":is$S$Exp118.$var,\n\"is-s-num\":is$s$num126.$var,\n\"is-s-sym\":is$s$sym162.$var,\n\"s-num\":s$num155.$var,\n\"s-sym\":s$sym163.$var,\n\"is-s-str\":is$s$str159.$var,\n\"lists\":lists35,\n\"s-str\":s$str161.$var,\n\"s-list\":s$list124.$var,\n\"is-s-list\":is$s$list119.$var},\n\"defined-types\":{\"S-Exp\":R.Any,\n\"lists\":R.Any,\n\"List\":R.Any},\n\"provide-plus-types\":R.mO({\"values\":provides165,\n\"types\":{\"List\":R.Any,\n\"S-Exp\":R.Any}}),\n\"checks\":checks167});\nbreak;\ncase 4: ++R.GAS;\nreturn $ans85;\ndefault: R.ffi.throwSpinnakerError(L[6],$step48);\n}\n}\nif($step48 !== 4) {\n$ans85.stack[R.EXN_STACKHEIGHT++] = R.mAR($al86,$toplevel49,$step48,[],[is$s$str159,is$s$list119,s$sym163,s$num155,s$list124,provides165,s$str161,is$s$sym162,is$S$Exp118,answer166,is$s$num126],$elidedFrames88);\n}\nreturn $ans85;\n};\nreturn R.safeCall($toplevel49,function module_load(moduleVal) {\nR.modules[\"$builtin://s$exp$structs44\"] = moduleVal;\nreturn moduleVal;\n},\"Evaluating $toplevel\");\n}",
"nativeRequires":[],
"provides":{"values":{"is-s-list":{"bind":"fun",
"flatness":0,
"name":"is-s-list",
"typ":"tany"},
"s-list":{"bind":"fun",
"flatness":0,
"name":"s-list",
"typ":"tany"},
"s-str":{"bind":"fun",
"flatness":0,
"name":"s-str",
"typ":"tany"},
"is-s-str":{"bind":"fun",
"flatness":0,
"name":"is-s-str",
"typ":"tany"},
"s-sym":{"bind":"fun",
"flatness":0,
"name":"s-sym",
"typ":"tany"},
"s-num":{"bind":"fun",
"flatness":0,
"name":"s-num",
"typ":"tany"},
"is-s-sym":{"bind":"fun",
"flatness":0,
"name":"is-s-sym",
"typ":"tany"},
"is-s-num":{"bind":"fun",
"flatness":0,
"name":"is-s-num",
"typ":"tany"},
"is-S-Exp":"tany"},
"datatypes":{"atom#S-Exp#1":["data","S-Exp",[],[["s-list",
[["exps",
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://s-exp-structs"},
"name":"List"},[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://s-exp-structs"},
"name":"S-Exp"}]]]]],["s-num",
[["n",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}]]],["s-str",
[["s",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]],["s-sym",
[["s",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]]],{}]},
"aliases":{"List":"tany",
"S-Exp":"tany"}},
"requires":[{"import-type":"builtin",
"name":"global"},
{"import-type":"builtin",
"name":"lists"}]})