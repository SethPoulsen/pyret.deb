({"theMap":"{\"version\":3,\"sources\":[\"builtin://equality\"],\"names\":[\"builtin://equality\",\",8,0,81,12,3,208\",\",9,2,104,9,9,111\",\",10,2,114,10,46,158\",\",11,2,161,11,45,204\",\",16,6,284,16,22,300\",\",17,6,317,17,22,333\",\",18,6,350,18,21,365\",\",25,6,542,25,19,555\",\",26,6,572,26,19,585\",\",27,6,602,27,21,617\",\",34,34,829,34,67,862\",\",34,28,823,34,68,863\",\",33,2,769,37,5,920\"],\"mappingsmBAODC,8CAPCD;AAAAA;AAAAA;AAAAA;AAAAA,mBAQCE,wCARDF;AAAAA;AAAAA;AAAAA;AAAAA,mBAQCE,qCARDF;AAAAA;AAAAA;AAAAA;AAAAA,mBASCG,2CATDH;AAAAA;AAAAA;AAAAA;AAAAA,mBASCG,wCATDH;AAAAA;AAAAA;AAAAA;AAAAA,mBAUCI,0CAVDJ;AAAAA;AAAAA;AAAAA;AAAAA,mBAUCI,uCAVDJ;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAeKK,sCAfLL;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAgBKM,sCAhBLN;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAiBKO,qCAjBLP;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAwBKQ,mCAxBLR;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAyBKS,mCAzBLT;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AA0BKU,qCA1BLV;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,SAiCiCW,gEAjCjCX;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAiC2BY,kCAjC3BZ;AAAAA;AAiC2BY,8BAjC3BZ;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,QAgCCa,6CAhCDb;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,SAODC,oDAPCD;AAAAA;AAAAA;AAAAA;AAAAA,SAODC,oDAPCD;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA\",\"file\":\"builtin://equality\"}",
"theModule":"function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__14(R,NAMESPACE,M,$error16,$$import17) {\nvar G = R.getFieldLoc;\nvar U = function throw_error(loc,name) {\nR.ffi.throwUninitializedIdMkLoc(loc,name);\n};\nvar M = \"builtin://equality\";\nvar D = R.undefined;\nvar L = [[M,9,2,104,9,9,111],\n[M,10,2,114,10,46,158],\n[M,11,2,161,11,45,204],\n[M,8,0,81,12,3,208],\n[M,14,0,210,21,3,467],\n[M,23,0,469,30,3,727],\n[M,32,0,729,38,3,924],\n[M,34,34,829,34,67,862],\n[M,34,28,823,34,68,863],\n[M,34,4,799,34,68,863],\n[M,33,2,769,37,5,920],\n[M,35,4,868,35,19,883],\n[M,36,4,888,36,30,914],\n[\"dummy location\"],\n[M,3,0,13,38,3,924]];\nvar builtins1 = R.gF(R.modules[\"builtin://global\"],\"defined-values\")[\"builtins\"];\nvar nothing2 = R.gF(R.modules[\"builtin://global\"],\"defined-values\")[\"nothing\"];\nvar raise1 = R.gF(R.modules[\"builtin://global\"],\"defined-values\")[\"raise\"];\nvar error2 = R.gF($error16,\"values\");\nvar error13 = R.gF($error16,\"types\");\nNAMESPACE = R.aMTN(NAMESPACE,[],[],$error16);\nNAMESPACE = R.aMTN(NAMESPACE,[],[],$$import17);\nvar $cases_dispatch107 = {\"Unknown\":1,\n\"Equal\":3,\n\"NotEqual\":4};\nvar $toplevel19 = function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__14($$resumer14) {\nvar $step18 = 0;\nvar $elidedFrames25 = 0;\nvar $ans22 = D;\nvar $al23 = L[14];\nif(R.isAR($$resumer14)) {\n$step18 = $$resumer14.step;\n$al23 = $$resumer14.from;\n$ans22 = $$resumer14.ans;\n$elidedFrames25 = $$resumer14.elidedFrames;\n$resumer14 = $$resumer14.args[0];\nanswer113 = $$resumer14.vars[0];\nis$EqualityResult51 = $$resumer14.vars[1];\nis$Unknown56 = $$resumer14.vars[2];\nequal$and71 = $$resumer14.vars[3];\nUnknown57 = $$resumer14.vars[4];\nNotEqual55 = $$resumer14.vars[5];\nprovides112 = $$resumer14.vars[6];\nis$Equal52 = $$resumer14.vars[7];\nis$NotEqual54 = $$resumer14.vars[8];\nequal$or87 = $$resumer14.vars[9];\nto$boolean110 = $$resumer14.vars[10];\nEqual53 = $$resumer14.vars[11];\n}\nif(--R.GAS <= 0 || --R.RUNGAS <= 0) {\nR.EXN_STACKHEIGHT = 0;\n$ans22 = R.mC();\n}\nwhile(!R.isContinuation($ans22)) {\nswitch($step18) {\ncase 0: var EqualityResult26 = R.nB(\"EqualityResult\",L[3]);\nR.mBA(EqualityResult26,\"EqualityResult\");\nvar EqualityResult50 = {\"$var\":D};\nvar is$EqualityResult51 = {\"$var\":D};\nvar is$Equal52 = {\"$var\":D};\nvar Equal53 = {\"$var\":D};\nvar is$NotEqual54 = {\"$var\":D};\nvar NotEqual55 = {\"$var\":D};\nvar is$Unknown56 = {\"$var\":D};\nvar Unknown57 = {\"$var\":D};\nvar equal$and71 = {\"$var\":D};\nvar equal$or87 = {\"$var\":D};\nvar to$boolean110 = {\"$var\":D};\nvar $Equal_getfields31 = function variant(f) {\nreturn f();\n};\nvar $Equal_mutablemask30 = [];\nvar $Equal$base27 = {\"_match\":R.mM(\"Equal\",0)};\nvar $Equal$brander28 = R.nB(\"Equal\",L[0]);\nvar $Equal$brands29 = {};\n$Equal$brands29[EqualityResult26._brand] = true;\n$Equal$brands29[$Equal$brander28._brand] = true;\nvar $NotEqual_getfields36 = function singleton_variant(f) {\nreturn f(this.dict[\"reason\"],this.dict[\"value1\"],this.dict[\"value2\"]);\n};\nvar $NotEqual_mutablemask35 = [false,false,false];\nvar $NotEqual$base32 = {\"$fieldNames\":[\"reason\",\"value1\",\"value2\"],\n\"_match\":R.mM(\"NotEqual\",3)};\nvar $NotEqual$brander33 = R.nB(\"NotEqual\",L[1]);\nvar $NotEqual$brands34 = {};\n$NotEqual$brands34[EqualityResult26._brand] = true;\n$NotEqual$brands34[$NotEqual$brander33._brand] = true;\nvar NotEqual37 = R.mVC(L[1],function $synthesizedConstructor_$NotEqual$base() {\nreturn [];\n},[],[],[false,false,false],[\"reason38\",\"value139\",\"value240\"],$NotEqual_mutablemask35,$NotEqual$base32,$NotEqual$brands34,\"NotEqual\",$NotEqual_getfields36,$NotEqual$base32);\nvar $Unknown_getfields45 = function singleton_variant(f) {\nreturn f(this.dict[\"reason\"],this.dict[\"value1\"],this.dict[\"value2\"]);\n};\nvar $Unknown_mutablemask44 = [false,false,false];\nvar $Unknown$base41 = {\"$fieldNames\":[\"reason\",\"value1\",\"value2\"],\n\"_match\":R.mM(\"Unknown\",3)};\nvar $Unknown$brander42 = R.nB(\"Unknown\",L[2]);\nvar $Unknown$brands43 = {};\n$Unknown$brands43[EqualityResult26._brand] = true;\n$Unknown$brands43[$Unknown$brander42._brand] = true;\nvar Unknown46 = R.mVC(L[2],function $synthesizedConstructor_$Unknown$base() {\nreturn [];\n},[],[],[false,false,false],[\"reason47\",\"value148\",\"value249\"],$Unknown_mutablemask44,$Unknown$base41,$Unknown$brands43,\"Unknown\",$Unknown_getfields45,$Unknown$base41);\nvar anf_assign75 = R.mO({\"EqualityResult\":G(EqualityResult26,\"test\",L[3]),\n\"is-Equal\":G($Equal$brander28,\"test\",L[0]),\n\"Equal\":R.mDV($Equal$base27,$Equal$brands29,\"Equal\",$Equal_getfields31,-1,$Equal_mutablemask30,$Equal$base27,false,L[0]),\n\"is-NotEqual\":G($NotEqual$brander33,\"test\",L[1]),\n\"NotEqual\":NotEqual37,\n\"is-Unknown\":G($Unknown$brander42,\"test\",L[2]),\n\"Unknown\":Unknown46});\nEqualityResult50.$var = anf_assign75;\nR.nothing;\n$al23 = L[3];\nvar anf_assign77 = G(EqualityResult50.$var,\"EqualityResult\",L[3]);\nis$EqualityResult51.$var = anf_assign77;\nR.nothing;\n$al23 = L[0];\nvar anf_assign79 = G(EqualityResult50.$var,\"is-Equal\",L[0]);\nis$Equal52.$var = anf_assign79;\nR.nothing;\n$al23 = L[0];\nvar anf_assign81 = G(EqualityResult50.$var,\"Equal\",L[0]);\nEqual53.$var = anf_assign81;\nR.nothing;\n$al23 = L[1];\nvar anf_assign83 = G(EqualityResult50.$var,\"is-NotEqual\",L[1]);\nis$NotEqual54.$var = anf_assign83;\nR.nothing;\n$al23 = L[1];\nvar anf_assign85 = G(EqualityResult50.$var,\"NotEqual\",L[1]);\nNotEqual55.$var = anf_assign85;\nR.nothing;\n$al23 = L[2];\nvar anf_assign87 = G(EqualityResult50.$var,\"is-Unknown\",L[2]);\nis$Unknown56.$var = anf_assign87;\nR.nothing;\n$al23 = L[2];\nvar anf_assign89 = G(EqualityResult50.$var,\"Unknown\",L[2]);\nUnknown57.$var = anf_assign89;\nR.nothing;\nvar $temp_lam59 = function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__4($er160,$er261) {\nvar $step58 = 0;\nvar $elidedFrames65 = 0;\nvar $ans62 = D;\nvar $al63 = L[4];\nvar $l = arguments.length;\nif($l !== 2) {\nvar $t = new Array($l);\nfor(var $i = 0;$i < $l;++$i) {\n$t[$i] = arguments[$i];\n}\nR.cAC(L[4],2,$t,false);\n}\nvar er160 = $er160;\nvar er261 = $er261;\n// callee optimization;\nwhile(!R.isContinuation($ans62)) {\nswitch($step58) {\ncase 0: // caller optimization;\n$ans62 = is$NotEqual54.$var.app(er160);\nvar anf_if69 = $ans62;\n$step58 = R.checkPyretTrue(anf_if69)?1:2;\nbreak;\ncase 1: $step58 = 7;\n$ans62 = er160;\nbreak;\ncase 2: // caller optimization;\n$ans62 = is$NotEqual54.$var.app(er261);\nvar anf_if68 = $ans62;\n$step58 = R.checkPyretTrue(anf_if68)?3:4;\nbreak;\ncase 3: $step58 = 7;\n$ans62 = er261;\nbreak;\ncase 4: // caller optimization;\n$ans62 = is$Unknown56.$var.app(er160);\nvar anf_if66 = $ans62;\n$step58 = R.checkPyretTrue(anf_if66)?5:6;\nbreak;\ncase 5: $step58 = 7;\n$ans62 = er160;\nbreak;\ncase 6: $step58 = 7;\n$ans62 = er261;\nbreak;\ncase 7: return $ans62;\ndefault: R.ffi.throwSpinnakerError(L[4],$step58);\n}\n}\nreturn $ans62;\n};\nvar anf_assign97 = R.mF($temp_lam59,\"equal-and\");\nequal$and71.$var = anf_assign97;\nR.nothing;\nvar $temp_lam74 = function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__5($er175,$er276) {\nvar $step73 = 0;\nvar $elidedFrames80 = 0;\nvar $ans77 = D;\nvar $al78 = L[5];\nvar $l = arguments.length;\nif($l !== 2) {\nvar $t = new Array($l);\nfor(var $i = 0;$i < $l;++$i) {\n$t[$i] = arguments[$i];\n}\nR.cAC(L[5],2,$t,false);\n}\nvar er175 = $er175;\nvar er276 = $er276;\n// callee optimization;\nwhile(!R.isContinuation($ans77)) {\nswitch($step73) {\ncase 0: // caller optimization;\n$ans77 = is$Equal52.$var.app(er175);\nvar anf_if83 = $ans77;\n$step73 = R.checkPyretTrue(anf_if83)?1:2;\nbreak;\ncase 1: $step73 = 7;\n$ans77 = er175;\nbreak;\ncase 2: // caller optimization;\n$ans77 = is$Equal52.$var.app(er276);\nvar anf_if82 = $ans77;\n$step73 = R.checkPyretTrue(anf_if82)?3:4;\nbreak;\ncase 3: $step73 = 7;\n$ans77 = er276;\nbreak;\ncase 4: // caller optimization;\n$ans77 = is$Unknown56.$var.app(er175);\nvar anf_if81 = $ans77;\n$step73 = R.checkPyretTrue(anf_if81)?5:6;\nbreak;\ncase 5: $step73 = 7;\n$ans77 = er175;\nbreak;\ncase 6: $step73 = 7;\n$ans77 = er276;\nbreak;\ncase 7: return $ans77;\ndefault: R.ffi.throwSpinnakerError(L[5],$step73);\n}\n}\nreturn $ans77;\n};\nvar anf_assign86 = R.mF($temp_lam74,\"equal-or\");\nequal$or87.$var = anf_assign86;\nR.nothing;\nvar $temp_lam89 = function _7cdc1a1b9f26bacb085bed9c86e4b5fd3106f7eca9c6b9ba00b6176c198bc115__6($er90) {\nvar $step88 = 0;\nvar $elidedFrames94 = 0;\nvar $ans91 = D;\nvar $al92 = L[6];\nif(R.isAR($er90)) {\n$step88 = $er90.step;\n$al92 = $er90.from;\n$ans91 = $er90.ans;\n$elidedFrames94 = $er90.elidedFrames;\ner90 = $er90.args[0];\ncases95 = $er90.vars[0];\n} else {\nvar $l = arguments.length;\nif($l !== 1) {\nvar $t = new Array($l);\nfor(var $i = 0;$i < $l;++$i) {\n$t[$i] = arguments[$i];\n}\nR.cAC(L[6],1,$t,false);\n}\nvar er90 = $er90;\n}\nif(--R.GAS <= 0 || --R.RUNGAS <= 0) {\nR.EXN_STACKHEIGHT = 0;\n$ans91 = R.mC();\n}\nwhile(!R.isContinuation($ans91)) {\nswitch($step88) {\ncase 0: var cases95 = er90;\n$al92 = L[10];\n$step88 = $cases_dispatch107[cases95.$name] || 5;\nbreak;\ncase 1: if(cases95.$arity !== 3) {\nif(cases95.$arity >= 0) {\nR.ffi.throwCasesArityErrorC(L[9],3,cases95.$arity,L[10],cases95.$loc);\n} else {\nR.ffi.throwCasesSingletonErrorC(L[9],true,L[10],cases95.$loc);\n}\n}\nvar $fn101 = cases95.$constructor.$fieldNames;\nvar r96 = R.dF(cases95.dict[$fn101[0]],cases95.$mut_fields_mask[0],false);\nvar v197 = R.dF(cases95.dict[$fn101[1]],cases95.$mut_fields_mask[1],false);\nvar v298 = R.dF(cases95.dict[$fn101[2]],cases95.$mut_fields_mask[2],false);\n$step88 = 2;\n$ans91 = R.maybeMethodCall3(error2,\"equality-failure\",L[7],r96,v197,v298);\nbreak;\ncase 2: var anf_arg99 = $ans91;\n$step88 = 6;\n$al92 = L[8];\nif(typeof(raise1.app) !== \"function\") {\nR.ffi.throwNonFunApp($al92,raise1);\n}\n$ans91 = raise1.app(anf_arg99);\nbreak;\ncase 3: if(cases95.$arity !== -1) {\nR.ffi.throwCasesSingletonErrorC(L[11],false,L[10],cases95.$loc);\n}\n$step88 = 6;\n$ans91 = (true);\nbreak;\ncase 4: if(cases95.$arity !== 3) {\nif(cases95.$arity >= 0) {\nR.ffi.throwCasesArityErrorC(L[12],3,cases95.$arity,L[10],cases95.$loc);\n} else {\nR.ffi.throwCasesSingletonErrorC(L[12],true,L[10],cases95.$loc);\n}\n}\nvar $fn103 = cases95.$constructor.$fieldNames;\nR.dF(cases95.dict[$fn103[0]],cases95.$mut_fields_mask[0],false);\nR.dF(cases95.dict[$fn103[1]],cases95.$mut_fields_mask[1],false);\nR.dF(cases95.dict[$fn103[2]],cases95.$mut_fields_mask[2],false);\n$step88 = 6;\n$ans91 = (false);\nbreak;\ncase 5: $ans91 = R.throwNoCasesMatched(L[10],cases95);\n$step88 = 6;\nbreak;\ncase 6: ++R.GAS;\nreturn $ans91;\ndefault: R.ffi.throwSpinnakerError(L[6],$step88);\n}\n}\nif($step88 !== 6) {\n$ans91.stack[R.EXN_STACKHEIGHT++] = R.mAR($al92,$temp_lam89,$step88,[er90],[cases95],$elidedFrames94);\n}\nreturn $ans91;\n};\nvar anf_assign109 = R.mF($temp_lam89,\"to-boolean\");\nto$boolean110.$var = anf_assign109;\nR.nothing;\n$step18 = 1;\n$ans22 = R.maybeMethodCall2(builtins1,\"trace-value\",L[13],L[13],nothing2);\nbreak;\ncase 1: var answer113 = $ans22;\nvar provides112 = R.mO({\"is-EqualityResult\":is$EqualityResult51.$var,\n\"Equal\":Equal53.$var,\n\"is-Equal\":is$Equal52.$var,\n\"NotEqual\":NotEqual55.$var,\n\"is-NotEqual\":is$NotEqual54.$var,\n\"Unknown\":Unknown57.$var,\n\"is-Unknown\":is$Unknown56.$var,\n\"equal-and\":equal$and71.$var,\n\"equal-or\":equal$or87.$var,\n\"to-boolean\":to$boolean110.$var});\n$step18 = 2;\n$ans22 = R.maybeMethodCall0(builtins1,\"current-checker\",L[3]);\nbreak;\ncase 2: var anf_method_obj111 = $ans22;\n$step18 = 3;\n$ans22 = R.maybeMethodCall0(anf_method_obj111,\"results\",L[3]);\nbreak;\ncase 3: var checks114 = $ans22;\n$step18 = 4;\n$ans22 = R.mO({\"answer\":answer113,\n\"namespace\":NAMESPACE,\n\"locations\":L,\n\"defined-values\":{\"NotEqual\":NotEqual55.$var,\n\"is-NotEqual\":is$NotEqual54.$var,\n\"is-Unknown\":is$Unknown56.$var,\n\"error\":error2,\n\"Unknown\":Unknown57.$var,\n\"is-Equal\":is$Equal52.$var,\n\"Equal\":Equal53.$var,\n\"to-boolean\":to$boolean110.$var,\n\"is-EqualityResult\":is$EqualityResult51.$var,\n\"equal-or\":equal$or87.$var,\n\"equal-and\":equal$and71.$var},\n\"defined-types\":{\"error\":R.Any,\n\"EqualityResult\":R.Any},\n\"provide-plus-types\":R.mO({\"values\":provides112,\n\"types\":{\"EqualityResult\":R.Any}}),\n\"checks\":checks114});\nbreak;\ncase 4: ++R.GAS;\nreturn $ans22;\ndefault: R.ffi.throwSpinnakerError(L[14],$step18);\n}\n}\nif($step18 !== 4) {\n$ans22.stack[R.EXN_STACKHEIGHT++] = R.mAR($al23,$toplevel19,$step18,[],[answer113,is$EqualityResult51,is$Unknown56,equal$and71,Unknown57,NotEqual55,provides112,is$Equal52,is$NotEqual54,equal$or87,to$boolean110,Equal53],$elidedFrames25);\n}\nreturn $ans22;\n};\nreturn R.safeCall($toplevel19,function module_load(moduleVal) {\nR.modules[\"$builtin://equality15\"] = moduleVal;\nreturn moduleVal;\n},\"Evaluating $toplevel\");\n}",
"nativeRequires":[],
"provides":{"values":{"equal-and":{"bind":"fun",
"flatness":1,
"name":"equal-and",
"typ":"tany"},
"equal-or":{"bind":"fun",
"flatness":1,
"name":"equal-or",
"typ":"tany"},
"is-EqualityResult":"tany",
"to-boolean":{"bind":"fun",
"flatness":false,
"name":"to-boolean",
"typ":"tany"},
"Equal":"tany",
"is-Equal":{"bind":"fun",
"flatness":0,
"name":"is-Equal",
"typ":"tany"},
"Unknown":{"bind":"fun",
"flatness":0,
"name":"Unknown",
"typ":"tany"},
"is-Unknown":{"bind":"fun",
"flatness":0,
"name":"is-Unknown",
"typ":"tany"},
"is-NotEqual":{"bind":"fun",
"flatness":0,
"name":"is-NotEqual",
"typ":"tany"},
"NotEqual":{"bind":"fun",
"flatness":0,
"name":"NotEqual",
"typ":"tany"}},
"datatypes":{"atom#EqualityResult#1":["data","EqualityResult",[],[["Equal"],["NotEqual",
[["reason",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["value1",
"tany"],["value2",
"tany"]]],["Unknown",
[["reason",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["value1",
"tany"],["value2",
"tany"]]]],{}]},
"aliases":{"EqualityResult":"tany"}},
"requires":[{"import-type":"builtin",
"name":"error"},
{"import-type":"builtin",
"name":"global"}]})